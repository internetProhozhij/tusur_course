"""
6. Судья игры "Крестики-нолики"

Дано: 
    список (list) строк, где "X" и "O" - это отметки игроков и "." - это пустая клетка.

Задание.
    Крестики-нолики - это игра для двух игроков (Х и О), которые расставляют эти знаки
    на 3х3 поле. Игрок, который сумел разместить три своих знака в любой горизонтали, 
    вертикали или диагонали -- выигрывает.

    Но сейчас мы не будем играть в эту игру. Вы будете судить игру, и оценивать результат.
    Вам дан результат игры, и вы должны решить, кто победил или что это ничья. 
    Ваша программа должна вернуть "X" если победил Х-игрок и "О" если победил О-игрок. 
    В случае ничьи, результат должен быть "D".

Пример:
    data = [
        "X.O",
        "XX.",
        "XOO"
    ]  -> "X"

    data = [
        "OO.",
        "XOX",
        "XOX"
    ]  -> "O"

    data = [
        "OOX",
        "XXO",
        "OXX"
    ]  -> "D"     
"""


def rotate(matrix: list[list]) -> list[list]:
    """поворот матрицы на 90 градусов.

    Результат
    ---------
    Транспонированная матрица.

    Пример использования
    --------------------
    >>> matrix = [
            [1, 2, 3], 
            [4 ,5, 6], 
            [7, 8, 9]
        ]
    >>> t_matrix = rotate(matrix)
    [
        [7, 4, 1],
        [8, 5, 2],
        [9, 6, 3]
    ]
    """
    lines = len(matrix)
    rows = len(matrix[0])
    rotated_matrix = [
        [matrix[j][i] for j in range(rows-1, -1, -1)]
        for i in range(lines)
    ]
    
    return rotated_matrix


def solution(game_result: list[str], playes: list=["O", "X"]) -> str:
    """Определение победителя в игре "Крестики-нолики".

    Параметры
    ---------
    game_result : list[list]
        Результат игры.
    players : list, default=["O", "X"]
        Метки игроков.

    Результат
    ---------
    Если есть победитель, то будет возвращена его метка. В противном случае
    будет возвращена метка "D" (ничья).

    Примечание
    ----------
    Чтобы не забыть логику, порожденную моим ГИГА-мозгом, напишу этот комментарий.

    Нужно определить победителя, то есть нужно найти последовательность длины 3
    (так как поле 3х3), состоящую из одинаковых маркеров (`О` или `Х`). 
    Эта последовательность может находиться:
    - по горизонтали;
    - по вертикали;
    - по главной диагонали (та, что начинается в левом верхнем углу);
    - по побочной диагонали (то, что начинается в левом нижнем углу).

    Можно использовать 2 матрицы - прямую (оригинальную) и повернутую на 90 по
    часовой стрелке. 

    >>> Пусть есть матрица ходов:       Повернутая матрица:
    >>>        [O O .]                       [X X O]
    >>>        [X O X]                       [O O O]
    >>>        [X O X]                       [X X .]
    >>>        winner = O                    winner = O

    Если повернуть матрицу, то для прохода по столбцам и по побочной диагонали можно
    использовать операции прохода по строкам и главной даигонали основной матрицы.
    """
    matrix_lines = len(game_result)
    if any(len(line) != matrix_lines for line in game_result):
        raise IndexError("Игровое поле должно быть представлено квадратной матрицей")

    rotated_matrix= rotate(game_result)

    matrices = [game_result, rotated_matrix]
    
    for matrix in matrices:
        # Проход по строкам
        for line in matrix:
            if all(marker == line[0] for marker in line) and line[0] in playes:
                return line[0]

        # Получение элементов главной диагонали
        main_diagonal = [matrix[i][i] for i in range(len(matrix))]
        if (
            all(marker == main_diagonal[0] for marker in main_diagonal)
            and main_diagonal[0] in playes
        ):
            return main_diagonal[0]

    return "D"


if __name__ == "__main__":
    data = [
        "OOX",
        "XXO",
        "XX."
    ]

    winner = solution(data)
    print(winner)